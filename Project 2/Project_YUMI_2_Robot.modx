MODULE Demo

!@@@@@@@@@@@@@@@@@@@ IMPORTANT @@@@@@@@@@@@@@@@@
! To open the gripper in the simulator: Pince_Ouvre;
! To close the gripper in the simulator: Pince_Ferme;
! To open the gripper on the real Yumi robot: g_GripOut;
! To close the gripper on the real Yumi robot: g_GripIn;
!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

! -------------------------------------------------------------------------------------
! Programme : GPA546Lab2
! Auteurs : Olivier Millette ET Camilo Serna
! Date : Juin 4, 2025
! Révision : V0.0
!
! Description:
! This program picks up two blocks from a chute and stacks them on a work table with the holes aligned.
! -------------------------------------------------------------------------------------

 ! "Positions" to fine-tune on the real robot
  ! Target "Crayon" position to adjust: XYZ position, quaternion orientation, robot configuration, external axis value
  PERS robtarget rCrayon:=[[-446.844,212.768,88],[0,0.92388,-0.382683,0],[0,0,0,5],[13.6937,9E+9,9E+9,9E+9,9E+9,9E+9]];
  ! Target "Chute" position: same structure as above
  PERS robtarget rGlissoire:=[[-190.29,284.31,67.00],[0.00167709,0.953086,0.0364607,-0.300492],[0,0,2,5],[-160.011,9E+09,9E+09,9E+09,9E+09,9E+09]];
  ! Robot retract position in joint coordinates
  PERS jointtarget jRetrait:=[[60,-85,20,-90,-70,90],[90,9E+09,9E+09,9E+09,9E+09,9E+09]];
  PERS robtarget rRetrait:=[[299.94,223.8,222.93],[0.125356,0.900436,-0.414284,0.0432356],[1,-1,-1,5],[-148.549,9E+09,9E+09,9E+09,9E+09,9E+09]];

  ! Target "Deposit" position for placing an object
  VAR robtarget rDepot;
  PERS robtarget rRetintermediaire:=[[90.75,170.91,186.17],[0.0053318,0.00536722,0.998846,-0.0474359],[1,1,-2,4],[-175.089,9E+09,9E+09,9E+09,9E+09,9E+09]];
  
  PERS wobjdata WobjFeuille:=[FALSE, TRUE, "",[[-457.766, -33.8683, 30.6071],[0.00184288, -0.999728, 0.00493531, 0.0227361]],[[146.79,19.7958,-3.63954],[0.0216626,0.703359,0.710494,-0.00381495]]];
  PERS wobjdata WobjTable:=[FALSE, TRUE, "",[[-488.45, 121.512, 17.5934],[0.702635, -0.000549124, 0.0108997, -0.711467]],[[0,0,0],[1,0,0,0]]];
  
  PERS robtarget p0 := [[146.69,29.25,13.40],[0.0214493,0.68754,-0.725824,0.00279732],[0,0,-2,4],[-106.777,9E+09,9E+09,9E+09,9E+09,9E+09]];
  PERS robtarget pX := [[443.97,33.10,19.01],[0.0156179,0.711312,-0.702536,0.0153322],[0,0,-2,4],[-118.13,9E+09,9E+09,9E+09,9E+09,9E+09]];
  PERS robtarget pY := [[151.05,244.34,7.77],[0.00452693,0.0342001,0.99937,-0.00830514],[0,2,-2,4],[-106.031,9E+09,9E+09,9E+09,9E+09,9E+09]];
  
  ! Computed "positions" data
  VAR pos pos_rRetrait;
  VAR pos pos_Actuelle;
  VAR num dist;
  VAR string heure;
  VAR string msg;
  VAR btnres answer;
  VAR robtarget rDepotArray{7}; ! Max 7 robtargets
  VAR num num_of_blocs;
  VAR errnum errvar;
  VAR num i;
  VAR num angleDeg;
  VAR num tan_val;
  VAR num apothem;
  VAR num trans_totale;
  VAR robtarget rTemp;
  VAR num dist_0X;
    VAR num dist_0Y;

  ! Constant data
  CONST num Epaisseur:=1; ! Thickness of a block (in inches)
  CONST num PouceToMM:=25.4; ! Conversion factor
  CONST num Decalage:=200; ! Approach or retract distance (mm)
  CONST num LongeurMM := Epaisseur * 4 * PouceToMM;

  ! Variable data
  VAR num EpaisMM;  
  
  ! Approach and retract speed (mm/sec)
  CONST speeddata LowSpeed:=[250,500,5000,1000];
  
  ! Maximum robot speed (mm/sec)
  CONST speeddata HighSpeed:=[1000,500,5000,1000];

  ! I/O states
  CONST dionum Ouverte:=0;
  CONST dionum Fermee:=1;
  CONST dionum Retracte:=0;
  CONST dionum Extension:=1;

  ! IO_ALIASES
  VAR signaldo Cabinet_Block_Sensor;
  VAR signaldo HoleSensor;
  VAR signaldo Cilinder;
  VAR signaldo Cilinder_Extended;
  VAR signaldo Cilinder_Retracted;
  
! -------------------------------------------------------------------------------------
! Procedure: main
! -------------------------------------------------------------------------------------
PROC main()
    
    IF NOT RobOS() THEN
      wi_tGripper:=[TRUE,[[0,0,136],[1,0,0,0]],[0.262,[8.2,11.7,52],[1,0,0,0],0.00021,0.00024,0.00009]];
      wi_tVacuum1st:=[TRUE,[[63.5,18.5,37.5],[0.707106781,0,0.707106781,0]],[0.262,[8.6,11.7,52.7],[1,0,0,0],0.00021,0.00024,0.00009]];
      t_Crayon:=[TRUE,[[118.5,18.5,37.5],[0.707107,0,0.707107,0]],[0.24,[8.2,12.5,48.1], [1,0,0,0],0.00022,0.00024,0.00009]];
    ENDIF
    
	! 1) Initialization:
	init;
    TPErase;
    
    IF RobOS() THEN
        ! Code for Real Robot
        TPWrite "Utilisation du vrai robot";
    ELSE
        ! Code for Virtual Controller
        TPWrite "Utilisation de la cellule virtuelle dans Robostudio";
    ENDIF

    ValidateRetrait;
    
	! Move to retract
	MoveAbsJ jRetrait, HighSpeed, fine, tPince\WObj:=WobjTable;
    
    ! 2) Calculations:
	EpaisMM := Epaisseur * PouceToMM; ! Conversion to mm
    
	! 3) Move blocks:
    select_num_blocs;
    ! Initialize robtargets in the array
    FOR i FROM 1 TO num_of_blocs DO
        ! Pick block from chute
        ! DepotIntermediare;
        Prise;
        DepotIntermediare;
        ! Deposit the block at rDepot {i}:
        Depot(rDepotArray{i});
        TPWrite heure + " - Bloc " + NumToStr(i, 0) + " déposé avec succès";
    ENDFOR	
    
	! 5) Return to retract
	MoveAbsJ jRetrait,HighSpeed,z50,tPince\WObj:=WobjTable;
	
	Pince_Ouvre;
    SetDO CabinetIO_0_DO16,1; ! simulate block pickup
    WaitTime 2; 
    SetDO CabinetIO_0_DO16,0; ! simulate block pickup
    Exit;
ENDPROC

! -------------------------------------------------------------------------------------
! Procedure: init
! -------------------------------------------------------------------------------------
PROC init()
    
    ! Smart gripper initialization
    !g_Calibrate \Jog;
    G_init \Calibrate;
    
	VelSet 25,1000; ! Safety speed limit, mandatory

	SetDO CabinetIO_0_DO9_FV0101, Retracte; ! Retract the cylinder
	 
    ! Open the gripper
    Pince_Ouvre;
    WaitTime 2;
    
ENDPROC

! -------------------------------------------------------------------------------------
! Procedure: Prise
! Description: Approach the chute, wait for a part, index it, and pick it safely
! -------------------------------------------------------------------------------------
PROC Prise()
    ! Declare a clock variable for timeout and a numeric to store elapsed time
    VAR clock timer;
    VAR num  elapsed;
    VAR robtarget rGlissoireCalc;
    
    !─── e) Presence‐check with 5 s timeout ───
    ClkReset timer;             ! reset to 0 :contentReference[oaicite:0]{index=0}
    ClkStart timer;             ! start counting :contentReference[oaicite:1]{index=1}
    
    ! Loop until a block is detected
    WHILE CabinetIO_0_DI9_ZS0101 = 0 DO
        ! Read elapsed seconds from clock
        elapsed := ClkRead(timer);  
        IF elapsed > 5 THEN
            ! retract to safe position
            MoveAbsJ jRetrait, HighSpeed, z50, tPince\WObj:=WobjTable;
            TPWrite "Avertissement : >5 s sans bloc – retour à rRetrait";
            ClkReset timer;       ! restart timeout
            ClkStart timer;
        ENDIF
        WaitTime 0.1;
    ENDWHILE
    WaitTime 1;  ! stabilize
        
    ! Check presence of a block in the chute
	IF CabinetIO_0_DI9_ZS0101 = 0 THEN
		TPErase;
		TPWrite "Pas de bloc dans la Chute" ;
        TPWrite "Placez deux blocs et passez en mode AUTO" ;
		WaitDI CabinetIO_0_DI9_ZS0101, 1; ! Wait for block
		Waittime 1; ! Wait for block to stabilize
	ENDIF
    
    ! Pick the block oriented by hole orientation
    IF CabinetIO_0_DI10_ZS0102 = 1 THEN
    	rGlissoireCalc := RelTool(rGlissoire, 0, 0, 0 \Rz := 180);
        rGlissoireCalc.robconf.cf6 := 0;
    ELSE
    	rGlissoireCalc := rGlissoire;
    ENDIF
    
    ! Grasp the block
    configSET("on");
    ! MoveAbsJ jRetrait, HighSpeed, z50,tPince\WObj:=WobjTable;
	MoveJ RelTool(rGlissoireCalc,0,0,-Decalage),HighSpeed,z50,tPince\WObj:=WobjTable;
	SetDO CabinetIO_0_DO9_FV0101, Extension; ! Push block
	WAITDI CabinetIO_0_DI14_ZS0104,1; ! Wait cylinder fully extended
	MoveL rGlissoireCalc, LowSpeed, fine, tPince\WObj:=WobjTable;
    configSET("off");
	
	SetDO CabinetIO_0_DO9_FV0101, Retracte;
    !WAITDI CabinetIO_0_DI14_ZS0104,0;
	 WAITDI CabinetIO_0_DI13_ZS0103,1;
    !g_GripIn; ! Close gripper
    Pince_Ferme;
    
	MoveL RelTool(rGlissoireCalc,0,0,-Decalage),LowSpeed,z50,tPince\WObj:=WobjTable;
    
ENDPROC

! -------------------------------------------------------------------------------------
! Procedure: Depot
! Argument: Receives a robtarget indicating where to place a block, with approach and clearance
! -------------------------------------------------------------------------------------
PROC Depot(robtarget rPosDepot)

    ! Even if rPosDepot was taught, setting configs Off reduces unnecessary moves
    configSET("on");
	MoveJ RelTool(rPosDepot,0,0,-Decalage), HighSpeed, z50, tPince\WObj:=WobjTable;
	MoveL rPosDepot, LowSpeed, fine, tPince\WObj:=WobjTable;
    configSET("off");
    ! Open the gripper
    Pince_Ouvre;
	MoveL RelTool(rPosDepot,0,0,-Decalage), LowSpeed, z50, tPince\WObj:=WobjTable;
    
ENDPROC

PROC DepotIntermediare()
    ! Even if rPosDepot was taught, setting configs Off reduces unnecessary moves
    configSET("on");
	MoveJ RelTool(rRetintermediaire,0,0,0), HighSpeed, z50, tPince\WObj:=WobjTable;
    configSET("off");
ENDPROC

! -------------------------------------------------------------------------------------
! Use these two procedures to close or open the Yumi gripper.
! On the real robot, use commands g_GripIn and g_GripOut
! -------------------------------------------------------------------------------------
PROC Pince_Ferme()
    IF RobOS() THEN
        g_GripIn;
    ELSE
        ! Code for Virtual Controller
!        SetDO custom_DO_0_gClose,1;
!        SetDO custom_DO_1_gOpen,0;
    ENDIF
    WaitTime 1;
ENDPROC

PROC configSET(string setting)
    IF setting = "on" THEN
        ConfJ \On;
        ConfL \On;
    ELSE
        ConfJ \Off;
        ConfL \Off;
    ENDIF
ENDPROC
   
PROC Pince_Ouvre()
    IF RobOS() THEN
        g_GripOut;
    ELSE
        ! Code for Virtual Controller
!        SetDO custom_DO_1_gOpen,1;
!        SetDO custom_DO_0_gClose,0;
    ENDIF
     WaitTime 1;
ENDPROC
! -------------------------------------------------------------------------------------
! Procedure: ValidateRetract
! -------------------------------------------------------------------------------------
PROC ValidateRetrait()
    ! Get positions
    pos_rRetrait := rRetrait.trans;
    pos_Actuelle := CPos(\Tool:=wi_tGripper, \WObj:=WobjTable);
    
    ! Calculate distance between positions
    dist := Distance(pos_rRetrait, pos_Actuelle);
    
    ! Check distance
    IF dist <= 50 THEN
        ! Validation successful: briefly turn on the blue light without waiting
        msg := "Distance entre pince et rRetrait est: " + NumToStr(dist, 0) + "mm";
        TPWrite msg;
        SetDO CabinetIO_0_DO4_JB01_LampBlu, 1;
        WaitTime \InPos,2;         ! Background wait
        SetDO CabinetIO_0_DO4_JB01_LampBlu, 0;
    ELSE
        ! Validation failed: display a message and turn on the orange light
        SetDO CabinetIO_0_DO5_JB01_LampOr, 1;
        WaitTime \InPos,5;
        SetDO CabinetIO_0_DO5_JB01_LampOr, 0;
        
        UIMsgBox
            \Header:="ERREUR de Distance",
            heure
            \MsgLine2:="La distance entre la pince et la position rRetrait est :" + NumToStr(dist, 1) + "mm" 
            \MsgLine3:="La distance doit être ≤ 50 mm"
            \MsgLine4:="S'il vous plaît, approchez la pince à la position retrait de au moins 50mm"
            \MsgLine5:="et réinitialisez le programme!"
            \Buttons:=btnOKCancel
            \Icon:=iconWarning
            \Result:=answer;
        
        IF answer = resCancel main;
        IF answer = resOK THEN 
            TPWrite "Arrêt du programme.";
            Exit;
        ENDIF

    ENDIF

ENDPROC

! -------------------------------------------------------------------------------------
! Procedure: select_num_blocks
! -------------------------------------------------------------------------------------
PROC select_num_blocs()
    
    ! Calculate distance between positions
    dist_0X := Distance(p0.trans, pX.trans);
    dist_0Y := Distance(p0.trans, pY.trans);
           
    rDepot:= Offs(p0, dist_0X/2, dist_0Y/2, 10);
    
    TPReadFK num_of_blocs, "Veuillez indiquer le nombre de blocs à palettiser : ",
        "3", "4", "5", "6", "7",
        \MaxTime:=60, \BreakFlag:=errvar;

    IF errvar = ERR_TP_MAXTIME THEN
        TPWrite "Temps écoulé sans réponse.";
        Exit;
    ENDIF

    num_of_blocs := num_of_blocs + 2;
    TPWrite "Le nombre de blocs à palettiser est :" \Num:=num_of_blocs;
    
    ! Apothem: A line segment from the center of a regular polygon to the midpoint of a side.
    tan_val := Tan(180 / num_of_blocs);
    apothem := EpaisMM / (2 * tan_val);
    trans_totale := (LongeurMM/2) + apothem + 1; !The + 2 here is just to assure that blocks do not collide
  
    FOR i FROM 1 TO num_of_blocs DO
        angleDeg := ((360.0 / num_of_blocs) * (i - 1)) + 90;
        
        ! Step 1: rotate rFeuilleCentre about its own Z by angleDeg degrees
        rTemp := RelTool(rDepot, 0, 0, 0 \Rz := angleDeg);
    
        ! Step 2: translate rTemp by 0 in X, –trans_totale in Y, 0 in Z (all in rTemp’s axes)
        rDepotArray{i} := RelTool(rTemp, 0, -trans_totale, 0);
    ENDFOR

ENDPROC

ENDMODULE
