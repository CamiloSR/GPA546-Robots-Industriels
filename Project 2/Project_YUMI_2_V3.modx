MODULE Demo

!@@@@@@@@@@@@@@@@@@@ IMPORTANT @@@@@@@@@@@@@@@@@
! To open the gripper in the simulator: Pince_Ouvre;
! To close the gripper in the simulator: Pince_Ferme;
! To open the gripper on the real Yumi robot: g_GripOut;
! To close the gripper on the real Yumi robot: g_GripIn;
!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

! -------------------------------------------------------------------------------------
! Program: Demo
! Authors: _______________ AND ______________
! Date: _________________
! Revision: ________________
!
! Description:
! This program picks up two blocks from a chute and stacks them on a work table with the holes aligned.
! -------------------------------------------------------------------------------------

  ! Tool data (gripper): active, TCP position, orientation, mass, center of gravity, inertia
  PERS tooldata wi_tGripper:=[TRUE,[[0,0,136],[1,0,0,0]],[0.262,[8.2,11.7,52],[1,0,0,0],0.00021,0.00024,0.00009]];


  ! "Positions" to fine-tune on the real robot
  ! Target "Crayon" position to adjust: XYZ position, quaternion orientation, robot configuration, external axis value
  PERS robtarget rCrayon:=[[-446.844,212.768,88],[0,0.92388,-0.382683,0],[0,0,0,5],[13.6937,9E+9,9E+9,9E+9,9E+9,9E+9]];
  ! Target "Chute" position: same structure as above
  PERS robtarget rGlissoire:=[[-193.434,277.819,65.0723],[0.212106,-0.671728,0.677924,0.210267],[0,0,2,5],[-88.7724,9E+9,9E+9,9E+9,9E+9,9E+9]];
  ! Robot retract position in joint coordinates
  PERS jointtarget jRetrait:=[[90,-75,20,-90,-70,90],[90,9E+09,9E+09,9E+09,9E+09,9E+09]];
  PERS robtarget rRetrait:=[[-327.80,-237.72,264.99],[0.0357309,-0.818372,-0.54703,0.172478],[1,-1,1,5],[-78.1561,9E+9,9E+9,9E+9,9E+9,9E+9]];
  ! Target "Deposit" position for placing an object
  PERS robtarget rDepot:=[[-129.86,-340.40,18.76],[0.00467908,0.504212,0.86356,0.00355758],[1,-2,1,5],[-13.1288,9E+9,9E+9,9E+9,9E+9,9E+9]];
  
  PERS wobjdata WobjFeuille;
  PERS wobjdata WobjTable;
  
! Position data taught on the REAL Robot A0610
!  PERS robtarget rGlissoire:=[[-198.06,298.21,69.39],[0.191697,-0.682156,0.666204,0.232568],[0,-2,-1,4],[-45.0214,9E+09,9E+09,9E+09,9E+09,9E+09]];
!  PERS robtarget rDepot:=[[-375.57,-183.03,38.56],[0.0317796,-0.759987,-0.647212,0.0502556],[0,0,-1,4],[-13.1289,9E+09,9E+09,9E+09,9E+09,9E+09]];
!  PERS robtarget rRetrait:=[[-298.20,-128.81,204.66],[0.0253836,0.0359018,-0.99901,-0.00679038],[0,0,-2,4],[-3.31775,9E+09,9E+09,9E+09,9E+09,9E+09]];

  
  ! Computed "positions" data
  VAR pos pos_rRetrait;
  VAR pos pos_Actuelle;
  VAR num dist;
  VAR string heure;
  VAR string msg;
  VAR btnres answer;
  VAR robtarget rDepotArray{7}; ! Max 7 robtargets
  VAR num num_of_blocs;
  VAR errnum errvar;
  VAR num i;


  ! Constant data
  CONST num Epaisseur:=1; ! Thickness of a block (in inches)
  CONST num PouceToMM:=25.4; ! Conversion factor
  CONST num Decalage:=200; ! Approach or retract distance (mm)

  ! Variable data
  VAR num EpaisMM;  
  
  ! Approach and retract speed (mm/sec)
  CONST speeddata LowSpeed:=[250,500,5000,1000];
  
  ! Maximum robot speed (mm/sec)
  CONST speeddata HighSpeed:=[1000,500,5000,1000];

  ! I/O states
  CONST dionum Ouverte:=0;
  CONST dionum Fermee:=1;
  CONST dionum Retracte:=0;
  CONST dionum Extension:=1;

! -------------------------------------------------------------------------------------
! Procedure: main
! -------------------------------------------------------------------------------------
PROC main()
    
	! 1) Initialization:
	init;
    TPErase;
    ValidateRetrait;
    
	! Move to retract
	MoveAbsJ jRetrait, HighSpeed, fine, tPince\wobj:=wobj0;
    
    ! 2) Calculations:
	EpaisMM := Epaisseur * PouceToMM; ! Conversion to mm
    
	! 3) Move blocks:
    select_num_blocs;
    ! Initialize robtargets in the array
    FOR i FROM 1 TO num_of_blocs DO
        ! Pick block from chute
        Prise;
        ! Deposit the block at rDepot {i}:
        Depot(rDepotArray{i});
        TPWrite heure + " - Bloc " + NumToStr(i, 0) + " déposé avec succès";
    ENDFOR	
    
	! 5) Return to retract
	MoveAbsJ jRetrait,HighSpeed,z50,tPince\wobj:=wobj0;
	
	Pince_Ouvre;
    SetDO CabinetIO_0_DO16,1; ! simulate block pickup
    WaitTime 2; 
    SetDO CabinetIO_0_DO16,0; ! simulate block pickup
    
ENDPROC

! -------------------------------------------------------------------------------------
! Procedure: init
! -------------------------------------------------------------------------------------
PROC init()
    
    ! Smart gripper initialization
    !g_Calibrate \Jog;
    G_init \Calibrate;
    
	VelSet 25,1000; ! Safety speed limit, mandatory

	SetDO CabinetIO_0_DO9_FV0101, Retracte; ! Retract the cylinder
	 
    ! Open the gripper
    Pince_Ouvre;
    WaitTime 2;
    
ENDPROC

! -------------------------------------------------------------------------------------
! Procedure: Prise
! Description: Approach the chute, wait for a part, index it, and pick it safely
! -------------------------------------------------------------------------------------
PROC Prise()
    ! Declare a clock variable for timeout and a numeric to store elapsed time
    VAR clock timer;
    VAR num  elapsed;
    VAR robtarget rGlissoireCalc;
    
    !─── e) Presence‐check with 5 s timeout ───
    ClkReset timer;             ! reset to 0 :contentReference[oaicite:0]{index=0}
    ClkStart timer;             ! start counting :contentReference[oaicite:1]{index=1}
    
    ! Loop until a block is detected
    WHILE CabinetIO_0_DI9_ZS0101 = 0 DO
        ! Read elapsed seconds from clock
        elapsed := ClkRead(timer);  
        IF elapsed > 5 THEN
            ! retract to safe position
            MoveAbsJ jRetrait, HighSpeed, z50, tPince\wobj:=wobj0;
            TPWrite "Avertissement : >5 s sans bloc – retour à rRetrait";
            ClkReset timer;       ! restart timeout
            ClkStart timer;
        ENDIF
        WaitTime 0.1;
    ENDWHILE
    WaitTime 1;  ! stabilize
        
    ! Check presence of a block in the chute
	IF CabinetIO_0_DI9_ZS0101 = 0 THEN
		TPErase;
		TPWrite "Pas de bloc dans la Chute" ;
        TPWrite "Placez deux blocs et passez en mode AUTO" ;
		WaitDI CabinetIO_0_DI9_ZS0101, 1; ! Wait for block
		Waittime 1; ! Wait for block to stabilize
	ENDIF
    
    ! Pick the block oriented by hole orientation
    IF CabinetIO_0_DI10_ZS0102 = 1 THEN
    	rGlissoireCalc := RelTool(rGlissoire, 0, 0, 0 \Rz := 180);
        rGlissoireCalc.robconf.cf6 := 0;
    ELSE
    	rGlissoireCalc := rGlissoire;
    ENDIF
    
    ! Grasp the block
    ConfJ \Off;
    ConfL \Off;
    MoveAbsJ jRetrait, HighSpeed, z50,tPince\wobj:=wobj0;
	MoveJ RelTool(rGlissoireCalc,0,0,-Decalage),HighSpeed,z50,tPince\wobj:=wobj0;
	SetDO CabinetIO_0_DO9_FV0101, Extension; ! Push block
	WAITDI CabinetIO_0_DI14_ZS0104,1; ! Wait cylinder fully extended
	MoveL rGlissoireCalc, LowSpeed, fine, tPince\wobj:=wobj0;
	
	SetDO CabinetIO_0_DO9_FV0101, Retracte;
    !WAITDI CabinetIO_0_DI14_ZS0104,0;
	 WAITDI CabinetIO_0_DI13_ZS0103,1;
    !g_GripIn; ! Close gripper
    Pince_Ferme;
    
	MoveL RelTool(rGlissoireCalc,0,0,-Decalage),LowSpeed,z50,tPince\wobj:=wobj0;
    
ENDPROC

! -------------------------------------------------------------------------------------
! Procedure: Depot
! Argument: Receives a robtarget indicating where to place a block, with approach and clearance
! -------------------------------------------------------------------------------------
PROC Depot(robtarget rPosDepot)

    ! Even if rPosDepot was taught, setting configs Off reduces unnecessary moves
    ConfJ \Off;
	MoveJ RelTool(rPosDepot,0,0,-Decalage), HighSpeed, z50, tPince\wobj:=wobj0;
    ConfL \Off;
	MoveL rPosDepot, LowSpeed, fine, tPince;
	heure := CTime();
    ! Open the gripper
    Pince_Ouvre;
	MoveL RelTool(rPosDepot,0,0,-Decalage), LowSpeed, z50, tPince\wobj:=wobj0;
    
ENDPROC

! -------------------------------------------------------------------------------------
! Use these two procedures to close or open the Yumi gripper.
! On the real robot, use commands g_GripIn and g_GripOut
! -------------------------------------------------------------------------------------
PROC Pince_Ferme()
    SetDO custom_DO_0_gClose,1;
    SetDO custom_DO_1_gOpen,0;
    !g_GripIn;
    WaitTime 1.5;
ENDPROC
   
PROC Pince_Ouvre()
     SetDO custom_DO_1_gOpen,1;
     SetDO custom_DO_0_gClose,0;
     !g_GripOut;
     WaitTime 1.5;
ENDPROC

! -------------------------------------------------------------------------------------
! Procedure: ValidateRetract
! -------------------------------------------------------------------------------------
PROC ValidateRetrait()
    ! Get positions
    pos_rRetrait := rRetrait.trans;
    pos_Actuelle := CPos(\Tool:=wi_tGripper, \WObj:=wobj0);
    
    ! Calculate distance between positions
    dist := Distance(pos_rRetrait, pos_Actuelle);
    
    ! Check distance
    IF dist <= 50 THEN
        ! Validation successful: briefly turn on the blue light without waiting
        msg := "Distance entre pince et rRetrait est: " + NumToStr(dist, 0) + "mm";
        SetDO CabinetIO_0_DO4_JB01_LampBlu, 1;
        WaitTime \InPos,2;         ! Background wait
        SetDO CabinetIO_0_DO4_JB01_LampBlu, 0;
    ELSE
        ! Validation failed: display a message and turn on the orange light
        SetDO CabinetIO_0_DO5_JB01_LampOr, 1;
        WaitTime \InPos,5;
        SetDO CabinetIO_0_DO5_JB01_LampOr, 0;
        
        UIMsgBox
            \Header:="ERREUR de Distance",
            heure
            \MsgLine2:="La distance entre la pince et la position rRetrait est :" + NumToStr(dist, 1) + "mm" 
            \MsgLine3:="La distance doit être ≤ 50 mm"
            \MsgLine4:="S'il vous plaît, approchez la pince à la position retrait de au moins 50mm"
            \MsgLine5:="et réinitialisez le programme!"
            \Buttons:=btnOKCancel
            \Icon:=iconWarning
            \Result:=answer;
        
        IF answer = resCancel main;
        IF answer = resOK THEN 
            TPWrite "Arrêt du programme.";
            Stop;
        ENDIF

    ENDIF

ENDPROC

! -------------------------------------------------------------------------------------
! Procedure: select_num_blocks
! -------------------------------------------------------------------------------------
PROC select_num_blocs()
        ! Geometry constants
    CONST num longBlocMM := 76.2;   ! 3 in
    CONST num demiBloc := longBlocMM / 2;
    VAR num angle_rad;
    VAR pos posDepot;
    VAR orient oriDepot;
    
    TPReadFK num_of_blocs, "Veuillez indiquer le nombre de blocs à palettiser : ",
        "3", "4", "5", "6", "7",
        \MaxTime:=60, \BreakFlag:=errvar;

    IF errvar = ERR_TP_MAXTIME THEN
        TPWrite "Temps écoulé sans réponse.";
        Stop;
    ENDIF

    num_of_blocs := num_of_blocs + 2;  ! index adjustment
    TPWrite "Le nombre de blocs à palettiser est :" \Num:=num_of_blocs;
    
    ! Calculate positions for N blocks in a polygon pattern
    FOR i FROM 1 TO num_of_blocs DO
        angle_rad := (2 * 3.14159 * (i - 1)) / num_of_blocs;
        
        ! Offset from origin of WobjFeuille
        posDepot := [ demiBloc * Cos(angle_rad), demiBloc * Sin(angle_rad), rDepot.trans.z ];

        ! Orientation pointing outward
        oriDepot := OrientZYX(0, 0, angle_rad * 180 / 3.14159);
        
        ! Store in robtarget array relative to WobjFeuille
        rDepotArray{i} := [posDepot, oriDepot, rDepot.robconf, rDepot.extax];
    ENDFOR
ENDPROC


ENDMODULE
