MODULE Exemple_PRojet1_Yumi
!===========================================    
! Révisé par Ahmed Joubair (Septembre 2021)
!=========================================== 
! ----------------------------------------------------------------------------
! Programme : GPA546Lab1
! Auteurs : Olivier Millette & Camilo Serna Restrepo
! Date : 2025-05-13
! Révision : ________________
!
! Description :
! Ce programme permet de prendre deux blocs dans une glissoire et de les
! superposer sur une table de travail.
! ----------------------------------------------------------------------------
    
  PERS tooldata wi_tGripper:=[TRUE,[[0,0,136],[1,0,0,0]],[0.262,[8.2,11.7,52],[1,0,0,0],0.00021,0.00024,0.00009]];
  ! Donnees de type position enseignees sur le mode simulation
  PERS robtarget rGlissoire:=[[-198.06,298.21,69.39],[0.191697,-0.682156,0.666204,0.232568],[0,-2,-1,4],[-45.0214,9E+09,9E+09,9E+09,9E+09,9E+09]];
  PERS robtarget rDepot:=[[-375.57,-183.03,38.56],[0.0317796,-0.759987,-0.647212,0.0502556],[0,0,-1,4],[-13.1289,9E+09,9E+09,9E+09,9E+09,9E+09]];
  PERS robtarget rRetrait:=[[-298.20,-128.81,202.66],[0.0253836,0.0359018,-0.99901,-0.00679038],[0,0,-2,4],[-3.31775,9E+09,9E+09,9E+09,9E+09,9E+09]];
  
 ! Donnees de type position enseignees sur le Robot REEL A0610
 !  PERS robtarget rGlissoire:=[[-198.06,298.21,69.39],[0.191697,-0.682156,0.666204,0.232568],[0,-2,-1,4],[-45.0214,9E+09,9E+09,9E+09,9E+09,9E+09]];
 !  PERS robtarget rDepot:=[[-375.57,-183.03,38.56],[0.0317796,-0.759987,-0.647212,0.0502556],[0,0,-1,4],[-13.1289,9E+09,9E+09,9E+09,9E+09,9E+09]];
 !  PERS robtarget rRetrait:=[[-298.20,-128.81,202.66],[0.0253836,0.0359018,-0.99901,-0.00679038],[0,0,-2,4],[-3.31775,9E+09,9E+09,9E+09,9E+09,9E+09]];

  ! Donnees de type position calculees
  VAR robtarget rDepot2;

  ! Donnees de type constante
  CONST num Epaisseur:= 1; ! Épaisseur d'un bloc (en pouces)
  CONST num PouceToMM:= 25.4; ! Facteur de conversion
  CONST num Decalage:= -80; ! Distance d'approche ou de retrait (mm)

  ! Données de type Variable
  VAR num EpaisMM:=0;

  ! Vitesse d'approche et de retrait (mm/sec)
  CONST speeddata LowSpeed:=[250,500,5000,1000];
  
  ! Vitesse maximale du robot (mm/sec)
  CONST speeddata HighSpeed:=[1000,500,5000,1000];

  ! Etat des entrees/sorties
  CONST dionum Ouverte:=0;
  CONST dionum Fermee:=1;
  CONST dionum Retracte:=0;
  CONST dionum Extension:=1;

  ! Variable pour limiter la zone de travail du robot
  VAR wztemporary EspaceRestreint;

! ----------------------------------------------------------------------------
! Procedure : main
! Auteurs : Yanick Noiseux
! Date : 4-08-2011
! Révision : 1.1
! Révision par: Martin Gaudreault
! Description :
! Routine qui est executee par le robot initialement.
! **** elle doit être en mode "cycle"
!
! ----------------------------------------------------------------------------
!**************************************************************************************
PROC main()

	! 1) Initialisation :
	init;
     
	! Deplacement a la position de repos
	MoveJ rRetrait, HighSpeed, fine, wi_tGripper\wobj:=wobj0;

	! 2) Calculs :
	EpaisMM := Epaisseur * PouceToMM; ! Conversion en mm
	rDepot2 := Offs(rDepot,0,0,EpaisMM);

	! 3) Déplacement du premier bloc :
	! Prise du bloc dans le glissoire
	Prise;
	! Dépôt du bloc 1 à la localisation rDepot :
	Depot(rDepot);

	! 4) Déplacement du deuxième bloc :
	! Prise du bloc dans le glissoire
	Prise;
	! Dépôt du bloc 2 à la localisation rDepot :
	Depot(rDepot2);

	! 5) Retourner le robot a la position de repos
	MoveJ rRetrait, HighSpeed, fine, wi_tGripper\wobj:=wobj0;
	
	
    g_GripOut;! Ouvrir la pince
    WaitTime 2;
    
    !Pince\Ouvert; 

ENDPROC
!**************************************************************************************

! ----------------------------------------------------------------------------
! Procedure : init
! Auteurs : Yanick Noiseux
! Date : 4-08-2011
! Révision : 1.1
! Révision par: Martin Gaudreault
! Description :
! Routine qui initialise les variables systèmes et les états des sorties
!
! ----------------------------------------------------------------------------
!**************************************************************************************
PROC init()


    ! %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Initialisation Smart gripper
    !g_Calibrate \Jog;
    G_init \Calibrate;
    !%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    
	VelSet 25,1000; ! Limitation imposée pour la sécurité, obligatoire

	SetDO CabinetIO_0_DO9_FV0101, Retracte; ! Rentrer le vérin         %% IRB1600: CabinetIO_0_DO9_FV0101, Retracte
	 

    g_GripOut; ! Ouvrir la pince
    WaitTime 2;
    
ENDPROC
!**************************************************************************************

! ----------------------------------------------------------------------------
! Procedure : Prise
! Auteurs : Yanick Noiseux
! Date : 4-08-2011
! Révision : 1.0
!
! Description :
! Routine qui s'approche du glissoire, atends une piece, 
! l'indexe et la prends de maniere securitaire
!
! ----------------------------------------------------------------------------
!**************************************************************************************
PROC Prise()

! Vérification de présence de bloc dans la glissoire
	IF CabinetIO_0_DI9_ZS0101 = 0 THEN
		TPErase;
		TPWrite "Aucun bloc dans la glissoire";
		TPWrite "Placer deux bloc et remettre en mode AUTO";
		WaitDI CabinetIO_0_DI9_ZS0101, 1; ! Attente d'un bloc
		Waittime 1; ! attente que le bloc se stabilise
	ENDIF

	! Prehension du bloc
	MoveJ RelTool(rGlissoire,0,0,Decalage),HighSpeed,z50,wi_tGripper\wobj:=wobj0;
	SetDO CabinetIO_0_DO9_FV0101, Extension; ! Indexer le bloc durant le mouvement
	WAITDI CabinetIO_0_DI14_ZS0104,1; ! Attendre pour le vérin sortie
	MoveL rGlissoire, LowSpeed, fine, wi_tGripper\wobj:=wobj0;
	
    
   
	SetDO CabinetIO_0_DO9_FV0101, Retracte;
    !WAITDI CabinetIO_0_DI14_ZS0104,0;
	 WAITDI CabinetIO_0_DI13_ZS0103,1;
     g_GripIn; ! Fermer la pince
    
	MoveL RelTool(rGlissoire,0,0,Decalage),LowSpeed,z50,wi_tGripper\wobj:=wobj0;
	
ENDPROC
!**************************************************************************************

! ----------------------------------------------------------------------------
! Procedure : Depot
! Auteurs : Yanick Noiseux
! Date : 4-08-2011
! Révision : 1.1
! Révision par: Martin Gaudreault
! Description :
! Routine qui initialise les variables systèmes et les états des sorties
!
! Parametre: recoit un robtarget où aller déposer le bloc avec aproche et degagement
!
! ----------------------------------------------------------------------------
!**************************************************************************************
PROC Depot(robtarget rPosDepot)

	MoveJ RelTool(rPosDepot,0,0,Decalage), HighSpeed, z50, wi_tGripper\wobj:=wobj0;
	MoveL rPosDepot,LowSpeed, fine, wi_tGripper;
	
    g_GripOut;! Ouvrir la pince
    g_stop;
	MoveL RelTool(rPosDepot,0,0,Decalage), LowSpeed, z50, wi_tGripper\wobj:=wobj0;

ENDPROC

!**************************************************************************************

PROC g_GripIn()
    !Pince_Ferme; Commande du gripper réel
    SetDO custom_DO_0_gClose,1;
    SetDO custom_DO_1_gOpen,0;
    WaitTime 1.5;
ENDPROC

PROC g_GripOut()
    !g_JogOut;Commande du gripper réel
    SetDO custom_DO_1_gOpen,1;
    SetDO custom_DO_0_gClose,0;
    WaitTime 1.5;
ENDPROC
    
!**************************************************************************************


!**************************************************************************************
ENDMODULE
